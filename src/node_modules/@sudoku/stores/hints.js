import { settings } from './settings';
import { writable } from 'svelte/store';

export const usedHints = writable(0);

function createHints() {
	let defaultHints = Infinity;

	const hints = writable(Infinity);

	settings.subscribe(($settings) => {
		if ($settings.hintsLimited) {
			defaultHints = $settings.hints;
			hints.update($hints => {
				if ($hints != $settings.hints) {
//                    localStorage.setItem("hints",$settings.hints);
                    return $settings.hints;
                }
                localStorage.setItem("hints",$hints);
				return $hints;
			})
		} else {
			defaultHints = Infinity;
			hints.set(Infinity);
//            localStorage.setItem("hints",Infinity);
		}
	});

	return {
		subscribe: hints.subscribe,

		useHint() {
			hints.update($hints => {
				if ($hints > 0) {
					usedHints.update($usedHints => {
                        localStorage.setItem("usedhints",$usedHints+1); 
                        return $usedHints + 1;
                    });
                    localStorage.setItem("hints",$hints-1)
					return $hints - 1;
				}

				return 0;
			});
		},

		reset() {
			hints.set(defaultHints);
            localStorage.setItem("hints",defaultHints);
            localStorage.setItem("usedhints",0); 
			usedHints.set(0);
		},
        
        loadFromStorage() {
            let loadedHints = localStorage.getItem("hints");
            let loadedUsedHints = localStorage.getItem("usedhints");
            hints.update($hints => {
                if(loadedHints === "Infinity") return Infinity;
                return JSON.parse(loadedHints) || 0;
            })
 			usedHints.update($usedHints => {
				return JSON.parse(loadedUsedHints) || 0;
			});
            return loadedHints && loadedUsedHints;
        },
        
	};
}

export const hints = createHints();